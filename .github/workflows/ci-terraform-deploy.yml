name: ci-terraform-deploy

on:
  pull_request:
    branches:
      - main
      - staging

permissions:
  pull-requests: write

env:
  TF_LOG: ERROR
  BUCKET_TF_STATE: ${{ secrets.BUCKET_TF_STATE }}
  GITHUB_RUN_ATTEMPT: 3

jobs:
  set-base-ref:
    runs-on: ubuntu-20.04
    outputs:
      base_ref: ${{ steps.set-base-ref.outputs.base_ref }}
    steps:
      - name: Set base_ref
        id: set-base-ref
        run: |
          base_ref=''
          if [ "${{ github.base_ref }}" == "main" ]; then
            base_ref='production'
          elif [ "${{ github.base_ref }}" == "staging" ]; then
            base_ref='staging'
          fi
          echo "base_ref=$base_ref" >> $GITHUB_ENV

  build-setup:
    needs: set-base-ref
    runs-on: ubuntu-20.04
    env:
      base_ref: ${{ needs.set-base-ref.outputs.base_ref }}
    permissions:
      id-token: write
      contents: write
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: 18
      - name: Setup pnpm
        uses: pnpm/action-setup@v2.4.0
        with:
          version: 8
      - name: Install dependencies
        run: pnpm i --no-frozen-lockfile --prod=false

      - name: Import Secrets
        id: import-secrets
        uses: hashicorp/vault-action@v2.7.1
        with:
          url: https://${{ secrets.VAULT_URL }}
          token: ${{ secrets.VAULT_TOKEN }}
          secrets: |
            pt/env/${{ env.base_ref }} $.$;

      - name: Secrets to json
        run: |
          touch secrets.json
          echo "${{ toJson(steps.import-secrets.outputs) }}" > secrets.json

      - name: Json to dotenv
        run: |
          mkdir -p ./env
          touch ./env/.${{ env.base_ref }}.env
          awk -F '[:,]' '/__/{ gsub(/ |\042|\{|\}/,""); gsub(/\$/,"\\$"); print $2 "=" $3}' secrets.json > ./env/.${{ env.base_ref }}.env

      - name: Install dummy certs for test
        run: sudo apt update && sh shared/helper/generate-local-certs.sh -y

      - name: Test backend
        run: pnpm --filter backend test

      - uses: actions/upload-artifact@v2
        with:
          name: dotenv
          path: ./env/.${{ env.base_ref }}.env

      - uses: actions/upload-artifact@v2
        with:
          name: backend-certs
          path: ./backend/certs

      - uses: actions/upload-artifact@v2
        with:
          name: frontend-certs
          path: ./frontend/certs

  deploy:
    needs: build-setup
    runs-on: ubuntu-20.04
    env:
      base_ref: ${{ needs.set-base-ref.outputs.base_ref }}
    strategy:
      matrix:
        workdir: ['backend', 'frontend']
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: 18
      - name: Setup pnpm
        uses: pnpm/action-setup@v2.4.0
        with:
          version: 8
      - uses: hashicorp/setup-terraform@v1.4.0
      - name: Install Dependencies
        run: pnpm i -g cross-env

      - name: Import Secrets
        id: import-secrets
        uses: hashicorp/vault-action@v2.7.1
        with:
          url: https://${{ secrets.VAULT_URL }}
          token: ${{ secrets.VAULT_TOKEN }}
          secrets: |
            pt/env/${{ env.base_ref }} AWS_REGION | AWS_REGION;
            pt/env/${{ env.base_ref }} AWS_ACCESS_KEY_ID | AWS_ACCESS_KEY_ID;
            pt/env/${{ env.base_ref }} AWS_SECRET_ACCESS_KEY | AWS_SECRET_ACCESS_KEY;

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Docker Setup Buildx
        uses: docker/setup-buildx-action@v2.9.1

      - uses: actions/download-artifact@v2
        with:
          name: dotenv
          path: ./env

      - uses: actions/download-artifact@v2
        with:
          name: backend-certs
          path: ./backend/certs

      - uses: actions/download-artifact@v2
        with:
          name: frontend-certs
          path: ./frontend/certs

      - name: Terraform Init
        id: init
        run: terraform -chdir=./infra/tf/${{ env.base_ref }}/applications/${{ matrix.workdir }} init
        continue-on-error: false

      - name: Terraform Validate
        id: validate
        run: terraform -chdir=./infra/tf/${{ env.base_ref }}/applications/${{ matrix.workdir }} validate -no-color
        continue-on-error: false

      - name: Terraform Plan
        id: plan
        run: terraform -chdir=./infra/tf/${{ env.base_ref }}/applications/${{ matrix.workdir }} plan
        continue-on-error: true

      - name: Terraform Apply
        run: terraform -chdir=./infra/tf/${{ env.base_ref }}/applications/${{ matrix.workdir }} apply -auto-approve

      - name: Destroy Resources if Terraform Apply fails
        if: failure()
        run: terraform -chdir=./infra/tf/${{ env.base_ref }}/applications/${{ matrix.workdir }} destroy -auto-approve
